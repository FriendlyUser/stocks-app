@page "/stockvalues"

@using stock_notifications.Services
@using IEXSharp.Model.CoreData.StockPrices.Response
@inject IexService SampleService
@inject NavigationManager NavManager

<h1>Stock Data in Tabular Format</h1>

<button class="btn btn-primary" @onclick="@(() => NavManager.NavigateTo("stockvalues?stock=NEXCF"))">Go To Nexcf</button>

<input @bind-value="currStock" @bind-value:event="oninput" />


<button class="btn btn-primary" @onclick="fetchData">
    Refetch Data
</button>

@if (stockPrices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>@currStock</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Volume</th>
                <th>Close</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var price in stockPrices)
            {
                <tr>
                    <td>@price.date</td>
                    <td>@price.volume</td>
                    <td>@price.close</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // see https://docs.microsoft.com/en-us/aspnet/core/blazor/fundamentals/dependency-injection?view=aspnetcore-3.1
    private List<HistoricalPriceResponse> stockPrices;
    private string currStock = "";
    protected override async Task OnInitializedAsync()
    {
        try {
            NavManager.TryGetQueryString<string>("stock", out currStock);
            if (currStock == null || currStock == "") {
                currStock = "AAPL";
            }
            stockPrices = await SampleService.StockPrices(currStock);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async void fetchData(MouseEventArgs e)
    {
        stockPrices = await SampleService.StockPrices(currStock);
    }
}